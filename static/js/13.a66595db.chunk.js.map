{"version":3,"sources":["utils/formatBalance.ts","hooks/useTickets.ts","utils/callHelpers.ts","utils/erc20.ts","hooks/useApprove.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","utils/lotteryUtils.js","hooks/useAllowance.ts","hooks/useTokenBalance.ts","hooks/useGetLotteryHasDrawn.ts","hooks/useBuyLottery.ts","components/Input/Input.tsx","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx","views/Home/components/CardValue.tsx","views/Home/components/CakeWinnings.tsx","views/Home/components/LotteryJackpot.tsx","views/Home/components/PurchaseWarningModal.tsx","views/Home/components/LotteryCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","useTotalRewards","useState","rewards","setRewards","lotteryContract","useLottery","fastRefresh","useRefresh","useEffect","a","getTotalRewards","res","fetchBalance","useTotalClaim","claimAmount","setClaimAmount","claimLoading","setClaimLoading","account","useWallet","ticketsContract","useLotteryTicket","useCallback","getTotalClaim","claim","useWinningNumbers","winngNumbers","setWinningNumbers","getWinningNumbers","useMatchingRewardLength","numbers","matchingNumbers","setMatchingNumbers","getMatchingRewardLength","matchedNumbaers","useTickets","lotteryNumber","tickets","setTickets","getTickets","approve","lpContract","masterChefContract","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","getContract","provider","Web3","eth","Contract","erc20","getAllowance","allowance","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","useSousApprove","sousId","dispatch","useDispatch","useSousChef","onApprove","updateUserAllowance","useLotteryApprove","cakeContract","useCake","useNftApprove","tokenContract","spenderAddress","StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","multiCall","abi","calls","web3","getWeb3","multi","MultiCallAbi","getMulticallAddress","itf","Interface","newCalls","slice","calldata","toLowerCase","encodeFunctionData","aggregate","returnData","concat","index","decodeFunctionResult","multiBuy","price","numbersList","console","error","customLotteryNum","issueIndex","issueIdex","getTicketsAmount","calls1","Array","apply","ticketAbi","tokenIds","id","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","push","calls3","getLotteryStatus","multiClaim","claimedStatus","unClaimedIds","filter","lotteryAbi","finanltokenIds","r","drawed","calls4","reduce","p","c","sum","getMax","maxNumber","getLotteryIssueIndex","matchNumber","historyAmount","parseInt","historyNumbers","winningNumbers","useLotteryAllowance","setAllowance","fetchAllowance","refreshInterval","setInterval","clearInterval","useNftAllowance","dependency","log","fetch","useTokenBalance","setBalance","ethereum","useGetLotteryHasDrawn","lotteryHasDrawn","setLotteryHasDrawn","state","fetchLotteryStatus","useMultiClaimLottery","lotteryTicketContract","onMultiClaim","txHash","useMultiBuyLottery","onMultiBuy","useMaxNumber","max","setMax","fetchMax","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TicketInput","symbol","availableSymbol","onSelectMax","TranslateString","useI18n","onClick","toLocaleString","BuyTicketModal","onDismiss","val","setVal","pendingTx","setPendingTx","setRequestedBuy","fullBalance","useMemo","maxTickets","handleBuy","Math","floor","random","handleSelectMax","Number","title","e","currentTarget","Tips","Announce","Final","fullWidth","variant","disabled","CardValue","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeWinnings","LotteryJackpot","lotteryPrizeAmount","maximumFractionDigits","TicketsList","WarningModal","StyledLotteryCard","Card","Block","CardImage","img","Label","textSubtle","Actions","FarmedStakingCard","requestedApproval","setRequestedApproval","requesteClaim","setRequestedClaim","cakeBalance","getCakeAddress","useModal","PurchaseWarningModal","onPresentApprove","handleClaim","handleApprove","tokenName","onPresentBuy","style","backdropFilter","background","mb","src","alt","width","height","marginRight","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupplyPrice","farms","useFarms","marketCap","useSTOSPrice","lifePerBlock","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","chrome","Hero","mediaQueries","lg","Cards","BaseLayout","sm","CustomText","Text","Home","Page","as","color","LotteryCard"],"mappings":"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","file":"static/js/13.a66595db.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\r\n\r\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\r\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\r\n  return displayBalance.toNumber()\r\n}\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\r\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\r\n}\r\n","import { useCallback, useState, useEffect } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\r\nimport useRefresh from './useRefresh'\r\nimport {\r\n  getTotalRewards,\r\n  getTotalClaim,\r\n  getMatchingRewardLength,\r\n  getWinningNumbers,\r\n  getTickets,\r\n} from '../utils/lotteryUtils'\r\n\r\nconst useTickets = (lotteryNumber = null) => {\r\n  const [tickets, setTickets] = useState([])\r\n  const { account } = useWallet()\r\n  const ticketsContract = useLotteryTicket()\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\r\n      setTickets(res)\r\n    }\r\n\r\n    if (account && lotteryContract && ticketsContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\r\n\r\n  return tickets\r\n}\r\n\r\nexport const useTotalRewards = () => {\r\n  const [rewards, setRewards] = useState(new BigNumber(0))\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTotalRewards(lotteryContract)\r\n      setRewards(new BigNumber(res))\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [lotteryContract, fastRefresh])\r\n\r\n  return rewards\r\n}\r\n\r\nexport const useTotalClaim = () => {\r\n  const [claimAmount, setClaimAmount] = useState(new BigNumber(0))\r\n  const [claimLoading, setClaimLoading] = useState(false)\r\n  const { account } = useWallet()\r\n  const ticketsContract = useLotteryTicket()\r\n  const lotteryContract = useLottery()\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    setClaimLoading(true)\r\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\r\n    setClaimAmount(claim)\r\n    setClaimLoading(false)\r\n  }, [account, lotteryContract, ticketsContract])\r\n\r\n  useEffect(() => {\r\n    if (account && lotteryContract && ticketsContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, fetchBalance, lotteryContract, ticketsContract])\r\n\r\n  return { claimLoading, claimAmount }\r\n}\r\n\r\nexport const useWinningNumbers = () => {\r\n  const [winngNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const rewards = await getWinningNumbers(lotteryContract)\r\n      setWinningNumbers(rewards)\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\r\n\r\n  return winngNumbers\r\n}\r\n\r\nexport const useMatchingRewardLength = (numbers) => {\r\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const matchedNumbaers = await getMatchingRewardLength(lotteryContract, numbers)\r\n      setMatchingNumbers(matchedNumbaers)\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [lotteryContract, numbers, fastRefresh])\r\n\r\n  return matchingNumbers\r\n}\r\n\r\nexport default useTickets\r\n","import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, account) => {\r\n  // shit code: hard fix for old CTK and BLK\r\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(0) })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n\r\n// Approve an NFT\r\nexport const useNftApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nexport default ModalActions\r\n","/* eslint-disable no-await-in-loop */\r\nimport BigNumber from 'bignumber.js'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport ticketAbi from 'config/abi/lotteryNft.json'\r\nimport lotteryAbi from 'config/abi/lottery.json'\r\nimport { getMulticallAddress } from './addressHelpers'\r\n\r\nexport const multiCall = async (abi, calls) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract(MultiCallAbi, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n  let res = []\r\n  if (calls.length > 100) {\r\n    let i = 0\r\n    while (i < calls.length / 100) {\r\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\r\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n      const { returnData } = await multi.methods.aggregate(calldata).call()\r\n      i++\r\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\r\n    }\r\n  } else {\r\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n    const { returnData } = await multi.methods.aggregate(calldata).call()\r\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\r\n  }\r\n  return res\r\n}\r\n\r\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\r\n  const issueIdex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n  const ticketIssues = await multiCall(ticketAbi, calls2)\r\n\r\n  const finalTokenids = []\r\n  ticketIssues.forEach(async (ticketIssue, i) => {\r\n    if (ticketIssue.toString() === issueIdex) {\r\n      finalTokenids.push(tokenIds[i])\r\n    }\r\n  })\r\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\r\n  const tickets = await multiCall(ticketAbi, calls3)\r\n\r\n  await getLotteryStatus(lotteryContract)\r\n  return tickets\r\n}\r\n\r\nexport const getTicketsAmount = async (ticketsContract, account) => {\r\n  return ticketsContract.methods.balanceOf(account).call()\r\n}\r\n\r\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\r\n  await lotteryContract.methods.issueIndex().call()\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n  const claimedStatus = await multiCall(ticketAbi, calls2)\r\n\r\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\r\n\r\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n  const rewards = await multiCall(lotteryAbi, calls3)\r\n\r\n  let finanltokenIds = []\r\n  rewards.forEach((r, i) => {\r\n    if (r > 0) {\r\n      finanltokenIds.push(unClaimedIds[i])\r\n    }\r\n  })\r\n\r\n  if (finanltokenIds.length > 200) {\r\n    finanltokenIds = finanltokenIds.slice(0, 200)\r\n  }\r\n\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiClaim(finanltokenIds)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\r\n  try {\r\n    const issueIdex = await lotteryContract.methods.issueIndex().call()\r\n    const length = await getTicketsAmount(ticketsContract, account)\r\n    // eslint-disable-next-line prefer-spread\r\n    const calls1 = Array.apply(null, { length }).map((a, i) => [\r\n      ticketsContract.options.address,\r\n      'tokenOfOwnerByIndex',\r\n      [account, i],\r\n    ])\r\n    const res = await multiCall(ticketAbi, calls1)\r\n    const tokenIds = res.map((id) => id.toString())\r\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n    const ticketIssues = await multiCall(ticketAbi, calls2)\r\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n    const claimedStatus = await multiCall(ticketAbi, calls3)\r\n\r\n    const drawed = await getLotteryStatus(lotteryContract)\r\n\r\n    const finalTokenids = []\r\n    ticketIssues.forEach(async (ticketIssue, i) => {\r\n      // eslint-disable-next-line no-empty\r\n      if (!drawed && ticketIssue.toString() === issueIdex) {\r\n      } else if (!claimedStatus[i][0]) {\r\n        finalTokenids.push(tokenIds[i])\r\n      }\r\n    })\r\n\r\n    const calls4 = finalTokenids.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n\r\n    const rewards = await multiCall(lotteryAbi, calls4)\r\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BigNumber(0))\r\n\r\n    return claim\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return BigNumber(0)\r\n}\r\n\r\nexport const getTotalRewards = async (lotteryContract) => {\r\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\r\n  return lotteryContract.methods.getTotalRewards(issueIdex).call()\r\n}\r\n\r\nexport const getMax = async (lotteryContract) => {\r\n  return lotteryContract.methods.maxNumber().call()\r\n}\r\n\r\nexport const getLotteryIssueIndex = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  return issueIndex\r\n}\r\n\r\nexport const getLotteryStatus = async (lotteryContract) => {\r\n  return lotteryContract.methods.drawed().call()\r\n}\r\n\r\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\r\n  let issueIdex = await lotteryContract.methods.issueIndex().call()\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n  if (!drawed) {\r\n    issueIdex -= 1\r\n  }\r\n  try {\r\n    const amount = await lotteryContract.methods.historyAmount(issueIdex, 5 - matchNumber).call()\r\n    return amount / 1e18 / 10\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return 0\r\n}\r\n\r\nexport const getWinningNumbers = async (lotteryContract) => {\r\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\r\n  const numbers = []\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n\r\n  if (!drawed && parseInt(issueIdex, 10) === 0) {\r\n    return [0, 0, 0, 0]\r\n  }\r\n  if (!drawed) {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIdex - 1, i).call()).toString())\r\n    }\r\n  } else {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\r\n    }\r\n  }\r\n  return numbers\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useCake, useLottery } from './useContract'\r\nimport { getAllowance } from '../utils/erc20'\r\n\r\n// Retrieve lottery allowance\r\nexport const useLotteryAllowance = () => {\r\n  const [allowance, setAllowance] = useState(new BigNumber(0))\r\n  const { account }: { account: string } = useWallet()\r\n  const lotteryContract = useLottery()\r\n  const cakeContract = useCake()\r\n\r\n  useEffect(() => {\r\n    const fetchAllowance = async () => {\r\n      const res = await getAllowance(cakeContract, lotteryContract, account)\r\n      setAllowance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && cakeContract && cakeContract) {\r\n      fetchAllowance()\r\n    }\r\n    const refreshInterval = setInterval(fetchAllowance, 10000)\r\n    return () => clearInterval(refreshInterval)\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return allowance\r\n}\r\n\r\n// Retrieve IFO allowance\r\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\r\n  const { account }: { account: string } = useWallet()\r\n  const [allowance, setAllowance] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\r\n        setAllowance(new BigNumber(res))\r\n      } catch (e) {\r\n        setAllowance(null)\r\n      }\r\n    }\r\n    fetch()\r\n  }, [account, spenderAddress, tokenContract, dependency])\r\n\r\n  return allowance\r\n}\r\n\r\n// Retrieve NFT allowance\r\nexport const useNftAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\r\n  const { account }: { account: string } = useWallet()\r\n  const [allowance, setAllowance] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\r\n        setAllowance(new BigNumber(res))\r\n      } catch (e) {\r\n        console.log(e.toString())\r\n        setAllowance(null)\r\n      }\r\n    }\r\n    fetch()\r\n  }, [account, spenderAddress, tokenContract, dependency])\r\n\r\n  return allowance\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useLottery } from 'hooks/useContract'\r\nimport { getLotteryStatus } from 'utils/lotteryUtils'\r\n\r\n/**\r\n * Returns whether or not the current lottery has drawn numbers\r\n *\r\n * @return {Boolean}\r\n */\r\nconst useGetLotteryHasDrawn = () => {\r\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\r\n  const { account } = useWallet()\r\n  const lotteryContract = useLottery()\r\n\r\n  useEffect(() => {\r\n    if (account && lotteryContract) {\r\n      const fetchLotteryStatus = async () => {\r\n        const state = await getLotteryStatus(lotteryContract)\r\n        setLotteryHasDrawn(state)\r\n      }\r\n\r\n      fetchLotteryStatus()\r\n    }\r\n  }, [account, lotteryContract])\r\n\r\n  return lotteryHasDrawn\r\n}\r\n\r\nexport default useGetLotteryHasDrawn\r\n","import { useCallback, useState, useEffect } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\r\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\r\n\r\nexport const useMultiClaimLottery = () => {\r\n  const { account } = useWallet()\r\n  const lotteryContract = useLottery()\r\n  const lotteryTicketContract = useLotteryTicket()\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    try {\r\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\r\n      return txHash\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, lotteryContract, lotteryTicketContract])\r\n\r\n  return { onMultiClaim: handleClaim }\r\n}\r\n\r\nexport const useMultiBuyLottery = () => {\r\n  const { account } = useWallet()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleBuy = useCallback(\r\n    async (amount: string, numbers: Array<any>) => {\r\n      try {\r\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\r\n        return txHash\r\n      } catch (e) {\r\n        return false\r\n      }\r\n    },\r\n    [account, lotteryContract],\r\n  )\r\n\r\n  return { onMultiBuy: handleBuy }\r\n}\r\n\r\nexport const useMaxNumber = () => {\r\n  const [max, setMax] = useState(5)\r\n  const lotteryContract = useLottery()\r\n\r\n  const fetchMax = useCallback(async () => {\r\n    const maxNumber = await getMax(lotteryContract)\r\n    setMax(maxNumber)\r\n  }, [lotteryContract])\r\n\r\n  useEffect(() => {\r\n    if (lotteryContract) {\r\n      fetchMax()\r\n    }\r\n  }, [lotteryContract, fetchMax])\r\n\r\n  return max\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  startAdornment?: React.ReactNode\r\n  value: string\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  )\r\n}\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.input};\r\n  border-radius: ${(props) => props.theme.radii.default};\r\n  display: flex;\r\n  height: 72px;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\nimport Input, { InputProps } from '../Input'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  availableSymbol: string\r\n  onSelectMax?: () => void\r\n}\r\n\r\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTokenInput>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"sm\" onClick={onSelectMax}>\r\n                {TranslateString(452, 'Max')}\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n      <StyledMaxText>{TranslateString(454, `${max.toLocaleString()} ${availableSymbol} Available`)}</StyledMaxText>\r\n    </StyledTokenInput>\r\n  )\r\n}\r\n\r\nconst StyledTokenInput = styled.div``\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TicketInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport TicketInput from 'components/TicketInput'\r\nimport ModalActions from 'components/ModalActions'\r\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface BuyTicketModalProps {\r\n  max: BigNumber\r\n  onConfirm?: (amount: string, numbers: Array<number>) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\r\n  const [val, setVal] = useState('1')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [, setRequestedBuy] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const maxTickets = useMemo(() => {\r\n    return parseInt(getFullDisplayBalance(max.div(new BigNumber(10))))\r\n  }, [max])\r\n\r\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => setVal(e.currentTarget.value)\r\n\r\n  const { onMultiBuy } = useMultiBuyLottery()\r\n  const maxNumber = useMaxNumber()\r\n  const handleBuy = useCallback(async () => {\r\n    try {\r\n      setRequestedBuy(true)\r\n      const length = parseInt(val)\r\n      // @ts-ignore\r\n      // eslint-disable-next-line prefer-spread\r\n      const numbers = Array.apply(null, { length }).map(() => [\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n      ])\r\n      const txHash = await onMultiBuy('10', numbers)\r\n      // user rejected tx or didn't go thru\r\n      if (txHash) {\r\n        setRequestedBuy(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    if (Number(maxTickets) > 40) {\r\n      setVal('40')\r\n    } else {\r\n      setVal(maxTickets.toString())\r\n    }\r\n  }, [maxTickets])\r\n\r\n  const cakeCosts = (amount: string): number => {\r\n    return +amount * 10\r\n  }\r\n  return (\r\n    <Modal title={TranslateString(450, 'Enter amount of tickets to buy')} onDismiss={onDismiss}>\r\n      <TicketInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol=\"TICKET\"\r\n        availableSymbol=\"STOS\"\r\n      />\r\n      <div>\r\n        <Tips>{TranslateString(456, 'Your amount must be a multiple of 10 STOS')}</Tips>\r\n        <Tips>{TranslateString(458, '1 Ticket = 10 STOS')}</Tips>\r\n      </div>\r\n      <div>\r\n        <Announce>\r\n          {TranslateString(\r\n            478,\r\n            'Ticket purchases are final. Your STOS cannot be returned to you after buying tickets.',\r\n          )}\r\n        </Announce>\r\n        <Final>{TranslateString(460, `You will spend: ${cakeCosts(val)} STOS`)}</Final>\r\n      </div>\r\n      <ModalActions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          id=\"lottery-buy-complete\"\r\n          fullWidth\r\n          disabled={pendingTx || parseInt(val) > Number(maxTickets) || parseInt(val) > 40 || parseInt(val) < 1}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await handleBuy()\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default BuyTicketModal\r\n\r\nconst Tips = styled.div`\r\n  margin-left: 0.4em;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: ${(props) => props.theme.colors.primary};\r\n`\r\n\r\nconst Final = styled.div`\r\n  margin-top: 1em;\r\n  text-align: center;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: ${(props) => props.theme.colors.primary};\r\n`\r\nconst Announce = styled.div`\r\n  margin-top: 1em;\r\n  margin-left: 0.4em;\r\n  color: #ed4b9e;\r\n`\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { useTotalClaim } from 'hooks/useTickets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWinnings = () => {\r\n  const { claimAmount } = useTotalClaim()\r\n  return <CardValue value={getBalanceNumber(claimAmount)} />\r\n}\r\n\r\nexport default CakeWinnings\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalRewards } from 'hooks/useTickets'\r\n\r\nconst LotteryJackpot = () => {\r\n  const lotteryPrizeAmount = useTotalRewards()\r\n\r\n  return (\r\n    <Text bold fontSize=\"24px\">\r\n      {getBalanceNumber(lotteryPrizeAmount).toLocaleString(undefined, {\r\n        maximumFractionDigits: 2,\r\n      })}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default LotteryJackpot\r\n","import React from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport styled from 'styled-components'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst WarningModal: React.FC<{ onDismiss?: () => void }> = ({ onDismiss }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Modal title={TranslateString(466, 'Warning')} onDismiss={onDismiss}>\r\n      <TicketsList>\r\n        {TranslateString(468, 'Lottery ticket purchases are final.')}\r\n        <br />\r\n        {TranslateString(470, 'Your STOS will not be returned to you after you spend it to buy tickets.')}\r\n        <br />\r\n        {TranslateString(472, 'Tickets are only valid for one lottery draw, and will be burnedafter the draw.')}\r\n        <br />\r\n        {TranslateString(\r\n          474,\r\n          'Buying tickets does not guarantee you will win anything. Please only participate once you understand the risks.',\r\n        )}\r\n      </TicketsList>\r\n      <ModalActions>\r\n        <Button fullWidth onClick={onDismiss}>\r\n          {TranslateString(476, 'I understand')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nconst TicketsList = styled.div`\r\n  text-align: left;\r\n  overflow-y: auto;\r\n  max-height: 400px;\r\n  color: ${(props) => props.theme.colors.primary};\r\n`\r\n\r\nexport default WarningModal\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button, useModal } from '@pancakeswap-libs/uikit'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\r\nimport { useLotteryAllowance } from 'hooks/useAllowance'\r\nimport { useLotteryApprove } from 'hooks/useApprove'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\r\nimport { useTotalClaim } from 'hooks/useTickets'\r\nimport BuyModal from 'views/Lottery/components/TicketCard/BuyTicketModal'\r\nimport CakeWinnings from './CakeWinnings'\r\nimport LotteryJackpot from './LotteryJackpot'\r\nimport PurchaseWarningModal from './PurchaseWarningModal'\r\n\r\nconst StyledLotteryCard = styled(Card)`\r\n  background-image: url('/images/ticket-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: flex;\r\n  margin-top: 24px;\r\n  button {\r\n    flex: 1 0 50%;\r\n  }\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\r\n  const [requesteClaim, setRequestedClaim] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const { claimAmount } = useTotalClaim()\r\n  const { onApprove } = useLotteryApprove()\r\n  const { onMultiClaim } = useMultiClaimLottery()\r\n  const allowance = useLotteryAllowance()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const [onPresentApprove] = useModal(<PurchaseWarningModal />)\r\n\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    try {\r\n      setRequestedClaim(true)\r\n      const txHash = await onMultiClaim()\r\n      // user rejected tx or didn't go thru\r\n      if (txHash) {\r\n        setRequestedClaim(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onMultiClaim, setRequestedClaim])\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const txHash = await onApprove()\r\n      // user rejected tx or didn't go thru\r\n      if (!txHash) {\r\n        setRequestedApproval(false)\r\n      }\r\n      onPresentApprove()\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, onPresentApprove])\r\n\r\n  const renderLotteryTicketButtons = () => {\r\n    if (!allowance.toNumber()) {\r\n      return (\r\n        <Button fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n          {TranslateString(999, 'Approve STOS')}\r\n        </Button>\r\n      )\r\n    }\r\n    return (\r\n      <Button id=\"dashboard-buy-tickets\" variant=\"secondary\" onClick={onPresentBuy} disabled={lotteryHasDrawn}>\r\n        {TranslateString(558, 'Buy Tickets')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  const [onPresentBuy] = useModal(<BuyModal max={cakeBalance} tokenName=\"STOS\" />)\r\n\r\n  return (\r\n    <StyledLotteryCard style={{ backdropFilter: 'blur(3px)', background: 'rgba(39, 38, 44, 0.8)' }}>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(550, 'Your Lottery Winnings')}\r\n        </Heading>\r\n        <CardImage src=\"/images/ticket.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <CakeWinnings />\r\n          <Label>{TranslateString(552, 'STOS to Collect')}</Label>\r\n        </Block>\r\n        <Block>\r\n          <LotteryJackpot />\r\n          <Label>{TranslateString(554, 'Total jackpot this round')}</Label>\r\n        </Block>\r\n        <Actions>\r\n          <Button\r\n            id=\"dashboard-collect-winnings\"\r\n            disabled={getBalanceNumber(claimAmount) === 0 || requesteClaim}\r\n            onClick={handleClaim}\r\n            style={{ marginRight: '8px' }}\r\n          >\r\n            {TranslateString(556, 'Collect Winnings')}\r\n          </Button>\r\n          {renderLotteryTicketButtons()}\r\n          {/* <Button id=\"dashboard-buy-tickets\" variant=\"secondary\" onClick={onPresentBuy} disabled={lotteryHasDrawn}>\r\n            {TranslateString(558, 'Buy Tickets')}\r\n          </Button> */}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledLotteryCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport useI18n from 'hooks/useI18n'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, useSTOSPrice, useTotalSupplyPrice } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  backdrop-filter: blur(3px);\r\n  background: rgba(39, 38, 44, 0.8);\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupplyPrice()\r\n  const farms = useFarms()\r\n  const price = useSTOSPrice()\r\n  const marketCap = price.times(totalSupply)\r\n\r\n  let eggPerBlock = 0\r\n  if (farms && farms[0] && farms[0].lifePerBlock) {\r\n    eggPerBlock = new BigNumber(farms[0].lifePerBlock).div(new BigNumber(10).pow(18)).toNumber()\r\n  }\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(534, 'STOS Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={marketCap.toNumber()} decimals={0} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\r\n          {totalSupply && <CardValue fontSize=\"14px\" value={0} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={0} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\r\n          {totalSupply && <CardValue fontSize=\"14px\" value={totalSupply.toNumber()} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          {/* <Text fontSize=\"14px\">{TranslateString(540, 'New STOS/block')}</Text>\r\n          <Text bold fontSize=\"14px\">\r\n            {0}\r\n          </Text> */}\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms } from '../../../state/hooks'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  backdrop-filter: blur(3px);\r\n  background: rgba(39, 38, 44, 0.8);\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </Heading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'safestos',\r\n          }}\r\n          options={{\r\n            height: '300',\r\n            chrome: 'noheader, nofooter',\r\n            width: '400',\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport LotteryCard from './components/LotteryCard'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/egg/3.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/egg/3.png'), url('/images/egg/3b.png');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 48px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CustomText = styled(Text)`\r\n  color: orange;\r\n  font-size: 30px;\r\n  text-shadow: 2px 2px 2px #000;\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {TranslateString(576, 'STOS Entertainment')}\r\n        </Heading>\r\n        <CustomText fontSize=\"24px\">\r\n          {TranslateString(\r\n            578,\r\n            'A global NFT hospitality project, curating unique entertainment experiences for our NFT & Token holders.',\r\n          )}\r\n        </CustomText>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          {/* <FarmStakingCard /> */}\r\n          <TwitterCard />\r\n          <LotteryCard />\r\n          <CakeStats />\r\n          {/* <TotalValueLockedCard /> */}\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}