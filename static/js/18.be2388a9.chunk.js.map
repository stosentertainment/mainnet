{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","useEffect","current","bold","StyledCakeStats","styled","Card","Row","div","CakeStats","TranslateString","totalSupply","useTotalSupplyPrice","farms","useFarms","marketCap","useSTOSPrice","times","lifePerBlock","BigNumber","pow","toNumber","size","mb","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","height","chrome","width","Hero","theme","mediaQueries","lg","Cards","BaseLayout","sm","CustomText","Text","Home","Page","as","color"],"mappings":"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","file":"static/js/18.be2388a9.chunk.js","sourcesContent":["import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\n\r\nconst variableRegex = /%(.*?)%/\r\n\r\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\r\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\r\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\r\n  const fallbackValueAtIndex = fallback.split(' ')[0]\r\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\r\n}\r\n\r\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\r\n  const foundTranslation = translations.find((translation) => {\r\n    return translation.data.stringId === translationId\r\n  })\r\n  if (foundTranslation) {\r\n    const translatedString = foundTranslation.data.text\r\n    const includesVariable = translatedString.includes('%')\r\n    if (includesVariable) {\r\n      return replaceDynamicString(translatedString, fallback)\r\n    }\r\n    return translatedString\r\n  }\r\n  return fallback\r\n}\r\n\r\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\r\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\r\n// @see https://reactjs.org/docs/hooks-rules.html\r\nexport const TranslateString = (translationId: number, fallback: string) => {\r\n  const { translations } = useContext(TranslationsContext)\r\n  if (translations[0] === 'error') {\r\n    return fallback\r\n  }\r\n  if (translations.length > 0) {\r\n    return getTranslation(translations, translationId, fallback)\r\n  }\r\n  return fallback\r\n}\r\n","import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\nimport { getTranslation } from '../utils/translateTextHelpers'\r\n\r\nconst useI18n = () => {\r\n  const { translations } = useContext(TranslationsContext)\r\n\r\n  return (translationId: number, fallback: string) => {\r\n    if (translations[0] === 'error') {\r\n      return fallback\r\n    }\r\n    if (translations.length > 0) {\r\n      return getTranslation(translations, translationId, fallback)\r\n    }\r\n    return fallback\r\n  }\r\n}\r\n\r\nexport default useI18n\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport useI18n from 'hooks/useI18n'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, useSTOSPrice, useTotalSupplyPrice } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  backdrop-filter: blur(3px);\r\n  background: rgba(39, 38, 44, 0.8);\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupplyPrice()\r\n  const farms = useFarms()\r\n  const price = useSTOSPrice()\r\n  const marketCap = price.times(totalSupply)\r\n\r\n  let eggPerBlock = 0\r\n  if (farms && farms[0] && farms[0].lifePerBlock) {\r\n    eggPerBlock = new BigNumber(farms[0].lifePerBlock).div(new BigNumber(10).pow(18)).toNumber()\r\n  }\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(534, 'STOS Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={marketCap.toNumber()} decimals={0} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\r\n          {totalSupply && <CardValue fontSize=\"14px\" value={0} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={0} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\r\n          {totalSupply && <CardValue fontSize=\"14px\" value={totalSupply.toNumber()} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          {/* <Text fontSize=\"14px\">{TranslateString(540, 'New STOS/block')}</Text>\r\n          <Text bold fontSize=\"14px\">\r\n            {0}\r\n          </Text> */}\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms } from '../../../state/hooks'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  backdrop-filter: blur(3px);\r\n  background: rgba(39, 38, 44, 0.8);\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </Heading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'safestos',\r\n          }}\r\n          options={{\r\n            height: '300',\r\n            chrome: 'noheader, nofooter',\r\n            width: '400',\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport LotteryCard from './components/LotteryCard'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/egg/3.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/egg/3.png'), url('/images/egg/3b.png');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 48px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CustomText = styled(Text)`\r\n  color: orange;\r\n  font-size: 30px;\r\n  text-shadow: 2px 2px 2px #000;\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {TranslateString(576, 'STOS Entertainment')}\r\n        </Heading>\r\n        <CustomText fontSize=\"24px\">\r\n          {TranslateString(\r\n            578,\r\n            'A global NFT hospitality project, curating unique entertainment experiences for our NFT & Token holders.',\r\n          )}\r\n        </CustomText>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          {/* <FarmStakingCard /> */}\r\n          <TwitterCard />\r\n          <CakeStats />\r\n          {/* <TotalValueLockedCard /> */}\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}